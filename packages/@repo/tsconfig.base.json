// Thanks to Sanity repo for this tsconfig
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "description": "Shared TS config that are used for builds, dts generation, etl extract, and vscode/intellisense",
  "compilerOptions": {
    // Everything needs to use the same lib settings for `paths` to work consistently throughout the monorepo
    "lib": ["dom", "esnext", "ES2022.Error"],

    // Output settings
    "target": "ESNext",
    "module": "preserve",
    "moduleDetection": "force",
    "allowSyntheticDefaultImports": true,
    "jsx": "preserve",
    // If a package that emits code forgets to specify the outDir then the default behavior of tsc is to colocate .d.ts files,
    // that's incredibly problematic and can be time-consuming to clean up. This default value acts as a failsafe against that
    "outDir": "./node_modules/.chainlink-monorepo/dts",

    // Don't emit anything by default, emit is done by `@sanity/pkg-utils` during build
    "noEmit": true,

    // Settings
    "preserveConstEnums": true,
    "useUnknownInCatchVariables": true,
    "isolatedModules": true,
    "forceConsistentCasingInFileNames": true,
    "allowJs": true,
    "checkJs": true,

    // Strict type-checking
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,

    "skipLibCheck": true,

    "noUnusedLocals": false,
    "noUnusedParameters": false,

    // These options are already set by "module": "Preserve" but if someone loads the monorepo in an older TS version you'll get confusing errors and so we set them here as a fallback
    "moduleResolution": "Bundler",
    "esModuleInterop": true,
    "resolveJsonModule": true
  }
}
